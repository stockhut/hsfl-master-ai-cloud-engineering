// Code generated by MockGen. DO NOT EDIT.
// Source: ../accounts/repository/repository.go
//
// Generated by this command:
//
//	mockgen -source ../accounts/repository/repository.go -destination=./mock-repository/repository_mocks.go
//
// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	model "github.com/stockhut/hsfl-master-ai-cloud-engineering/authentication/accounts/model"
	repository "github.com/stockhut/hsfl-master-ai-cloud-engineering/authentication/accounts/repository"
	gomock "go.uber.org/mock/gomock"
)

// MockAccountRepository is a mock of AccountRepository interface.
type MockAccountRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAccountRepositoryMockRecorder
}

// MockAccountRepositoryMockRecorder is the mock recorder for MockAccountRepository.
type MockAccountRepositoryMockRecorder struct {
	mock *MockAccountRepository
}

// NewMockAccountRepository creates a new mock instance.
func NewMockAccountRepository(ctrl *gomock.Controller) *MockAccountRepository {
	mock := &MockAccountRepository{ctrl: ctrl}
	mock.recorder = &MockAccountRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountRepository) EXPECT() *MockAccountRepositoryMockRecorder {
	return m.recorder
}

// CheckDuplicate mocks base method.
func (m *MockAccountRepository) CheckDuplicate(acc model.Account) (repository.AccountInfoDuplicate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckDuplicate", acc)
	ret0, _ := ret[0].(repository.AccountInfoDuplicate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckDuplicate indicates an expected call of CheckDuplicate.
func (mr *MockAccountRepositoryMockRecorder) CheckDuplicate(acc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckDuplicate", reflect.TypeOf((*MockAccountRepository)(nil).CheckDuplicate), acc)
}

// CreateAccount mocks base method.
func (m *MockAccountRepository) CreateAccount(acc model.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", acc)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockAccountRepositoryMockRecorder) CreateAccount(acc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockAccountRepository)(nil).CreateAccount), acc)
}

// FindAccount mocks base method.
func (m *MockAccountRepository) FindAccount(name string) (*model.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAccount", name)
	ret0, _ := ret[0].(*model.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAccount indicates an expected call of FindAccount.
func (mr *MockAccountRepositoryMockRecorder) FindAccount(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAccount", reflect.TypeOf((*MockAccountRepository)(nil).FindAccount), name)
}
