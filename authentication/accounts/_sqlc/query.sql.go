// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: query.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createAccount = `-- name: CreateAccount :execresult
INSERT INTO accounts (name, email, passwordhash)
VALUES ($1, $2, $3)
`

type CreateAccountParams struct {
	Name         string
	Email        string
	Passwordhash []byte
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createAccount, arg.Name, arg.Email, arg.Passwordhash)
}

const getAccount = `-- name: GetAccount :one
SELECT name, email, passwordhash
FROM accounts
WHERE name = $1
LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context, name string) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, name)
	var i Account
	err := row.Scan(&i.Name, &i.Email, &i.Passwordhash)
	return i, err
}

const getAccountByEmail = `-- name: GetAccountByEmail :one
SELECT name, email, passwordhash
FROM accounts
WHERE email = $1
LIMIT 1
`

func (q *Queries) GetAccountByEmail(ctx context.Context, email string) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccountByEmail, email)
	var i Account
	err := row.Scan(&i.Name, &i.Email, &i.Passwordhash)
	return i, err
}
